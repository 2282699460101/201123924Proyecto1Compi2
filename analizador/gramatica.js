/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,17],$V2=[1,6],$V3=[1,8],$V4=[1,9],$V5=[1,10],$V6=[1,11],$V7=[1,12],$V8=[1,19],$V9=[2,121],$Va=[22,28,68,74,89,90,94,98,99,102,103,104,105,108],$Vb=[2,125],$Vc=[1,21],$Vd=[1,22],$Ve=[22,28,68,74,89,90,94,98,99,102,103,104,105,108,111,112],$Vf=[2,130],$Vg=[1,24],$Vh=[1,25],$Vi=[1,26],$Vj=[22,28,68,74,89,90,94,98,99,102,103,104,105,108,111,112,115,116,117],$Vk=[2,135],$Vl=[1,29],$Vm=[1,30],$Vn=[1,28],$Vo=[22,28,68,70,71,74,89,90,94,98,99,102,103,104,105,108,111,112,115,116,117,120],$Vp=[1,34],$Vq=[2,155],$Vr=[1,39],$Vs=[18,22,28,68,70,71,74,89,90,94,98,99,102,103,104,105,108,111,112,115,116,117,120],$Vt=[2,147],$Vu=[1,41],$Vv=[1,51],$Vw=[22,68,74,94],$Vx=[2,109],$Vy=[1,53],$Vz=[1,54],$VA=[22,68,74,94,98,99],$VB=[2,89],$VC=[1,93],$VD=[2,150],$VE=[1,102];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"SENTENCIAS":3,"SENTENCIA":4,"SENTENCIA_PRIMA":5,"ESTRUCTURA_CONTROL":6,"DECLARACION":7,"ASIGNACION":8,"TYPES":9,"LLAMADA":10,";":11,"FUNCIONES_NATIVAS":12,"FUNCION":13,"RETORNO":14,"BREAK":15,"CONTINUE":16,"console":17,".":18,"log":19,"(":20,"LISTA_EXPRESIONES":21,")":22,"graficar_ts":23,"CONDICION":24,"function":25,"ID":26,"PARAMETROS":27,":":28,"TIPO":29,"{":30,"}":31,"return":32,"break":33,"continue":34,"ESTRUCTURA_IF":35,"ESTRUCTURA_WHILE":36,"ESTRUCTURA_SWITCH":37,"ESTRUCTURA_DO_WHILE":38,"ESTRUCTURA_FOR":39,"S_IF":40,"S_IF_PRIMA":41,"if":42,"else":43,"S_IF_ELSE":44,"while":45,"switch_term":46,"SWITCH_CASES":47,"SWITCH_CASE":48,"SWITCH_CASES_PRIMA":49,"case_term":50,"DEFAULT_CASE":51,"default_term":52,"do":53,"for":54,"CONDICIONES_FOR":55,"CONDICION_FOR_NORMAL":56,"CONDICION_FOR_OF":57,"CONDICION_FOR_IN":58,"PRIMERA_CONDICION_FOR":59,"let":60,"of":61,"in":62,"=":63,"LISTA_DECLARACION":64,"ASIGNACION_ARREGLO":65,"ASIGNACION_TYPES":66,"const":67,",":68,"ACCESO":69,"++":70,"--":71,"[":72,"LISTA_ARREGLO":73,"]":74,"ELEMENTO_ARREGLO":75,"LISTA_ARREGLO_PRIMA":76,"VALORES_TYPE":77,"VALOR_TYPE":78,"VALORES_TYPE_PRIMA":79,"LISTA_EXPRESIONES_PRIMA":80,"PARAMETRO":81,"PARAMETROS_PRIMA":82,"type":83,"number":84,"DIMENSION_ARREGLO":85,"string":86,"boolean":87,"Array":88,"<":89,">":90,"void":91,"CONDICION_BETA":92,"CONDICION_PRIMA":93,"?":94,"EXPRESION":95,"!":96,"D":97,"||":98,"&&":99,"RELACIONAL":100,"F":101,">=":102,"<=":103,"==":104,"!=":105,"INICIO":106,"LISTA_EXPRESION":107,"EOF":108,"H":109,"EXPRESION_PRIMA":110,"+":111,"-":112,"G":113,"MULTIPLICACION_PRIMA":114,"*":115,"/":116,"%":117,"OPCION_EXPRESION":118,"POTENCIA_PRIMA":119,"**":120,"T":121,"NUMBER":122,"STRING":123,"true":124,"false":125,"null":126,"ACCESO_PRIMITIVO":127,"ACCESO_PRIMA":128,"PROFUNDIDAD":129,"length":130,"push":131,"pop":132,"$accept":0,"$end":1},
terminals_: {2:"error",11:";",17:"console",18:".",19:"log",20:"(",22:")",23:"graficar_ts",25:"function",26:"ID",28:":",30:"{",31:"}",32:"return",33:"break",34:"continue",42:"if",43:"else",45:"while",46:"switch_term",50:"case_term",52:"default_term",53:"do",54:"for",60:"let",61:"of",62:"in",63:"=",67:"const",68:",",70:"++",71:"--",72:"[",74:"]",83:"type",84:"number",86:"string",87:"boolean",88:"Array",89:"<",90:">",91:"void",94:"?",96:"!",98:"||",99:"&&",102:">=",103:"<=",104:"==",105:"!=",108:"EOF",111:"+",112:"-",115:"*",116:"/",117:"%",120:"**",122:"NUMBER",123:"STRING",124:"true",125:"false",126:"null",130:"length",131:"push",132:"pop"},
productions_: [0,[3,2],[5,2],[5,0],[4,1],[4,1],[4,1],[4,1],[4,2],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[12,7],[12,5],[13,10],[13,8],[13,9],[13,7],[14,3],[14,2],[15,2],[16,2],[6,1],[6,1],[6,1],[6,1],[6,1],[35,2],[40,7],[41,9],[41,4],[41,0],[44,9],[44,4],[44,0],[36,7],[37,7],[47,2],[48,4],[49,2],[49,1],[49,0],[51,3],[38,9],[39,7],[55,1],[55,1],[55,1],[56,4],[59,1],[59,1],[57,4],[58,4],[7,6],[7,7],[7,7],[7,7],[7,6],[7,7],[7,7],[7,7],[7,5],[7,3],[64,5],[64,0],[8,4],[8,4],[8,4],[8,3],[8,3],[65,3],[65,2],[73,2],[75,1],[75,1],[76,3],[76,0],[66,3],[77,2],[78,3],[79,3],[79,0],[10,3],[10,4],[21,2],[80,3],[80,0],[27,2],[81,3],[82,3],[82,0],[9,7],[29,2],[29,2],[29,2],[29,2],[29,4],[29,1],[85,3],[85,0],[24,2],[24,5],[92,2],[92,1],[93,3],[93,3],[93,0],[97,1],[100,2],[101,2],[101,2],[101,2],[101,2],[101,2],[101,2],[101,0],[106,3],[107,3],[107,0],[95,2],[110,3],[110,3],[110,0],[109,2],[114,3],[114,3],[114,3],[114,0],[113,2],[119,3],[119,1],[119,1],[119,0],[118,2],[118,1],[121,1],[121,1],[121,1],[121,1],[121,1],[121,1],[121,1],[121,3],[69,2],[127,1],[127,5],[129,4],[129,0],[128,3],[128,2],[128,5],[128,4],[128,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 14:
 console.log('ERROR: ' + $$[$0] +', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column+ ', esperado: '+this._terminals) ; 
break;
case 119:
 console.log('LECTURA EXITOSA');
                                         let listaExpresiones = [$$[$0-2]]; if($$[$0-1]){ listaExpresiones.push(...$$[$0-1]); }
                                         return new Raiz(listaExpresiones);
                                       
break;
case 120:
  this.$ = [$$[$0-1]]; if($$[$0]){ this.$.push(...$$[$0]); }  
break;
case 121: case 125: case 135:
 this.$ = null; 
break;
case 122: case 126: case 131:
 this.$ = new Expresion($$[$0-1],$$[$0]); 
break;
case 123:
 this.$ = new Suma($$[$0-1],$$[$0]);
                                             this.$.setLineaColumna( this._$.first_line , this._$.first_column);
                                          
break;
case 124:
 this.$ = new Resta($$[$0-1],$$[$0]);
                                            this.$.setLineaColumna( this._$.first_line , this._$.first_column);
                                          
break;
case 127:
 this.$ = new Multiplicacion($$[$0-1],$$[$0]);
                                                                        this.$.setLineaColumna( this._$.first_line , this._$.first_column);
                                                                      
break;
case 128:
 this.$ = new Division($$[$0-1],$$[$0]);
                                                                        this.$.setLineaColumna( this._$.first_line , this._$.first_column);
                                                                      
break;
case 129:
 this.$ = new Modulo($$[$0-1],$$[$0]);
                                                                        this.$.setLineaColumna( this._$.first_line , this._$.first_column);
                                                                      
break;
case 130:
 this.$ = null 
break;
case 132:
 this.$ = new Potencia($$[$0-1],$$[$0]);
                                                                this.$.setLineaColumna( this._$.first_line , this._$.first_column);
                                                              
break;
case 133:
 this.$ = new Incremento();
                         this.$.setLineaColumna( this._$.first_line , this._$.first_column);
                       
break;
case 134:
 this.$ = new Decremento();
                         this.$.setLineaColumna( this._$.first_line , this._$.first_column);
                       
break;
case 136:
 this.$ = new MenosUnario($$[$0]);
                           this.$.setLineaColumna( this._$.first_line , this._$.first_column);
                         
break;
case 137:
 this.$ = $$[$0]; 
break;
case 138:
 this.$ = new ValorBasico(TIPO_VALOR.NUMERO, Number($$[$0]));
               this.$.setLineaColumna( this._$.first_line , this._$.first_column);
             
break;
case 139:
 this.$ = new ValorBasico(TIPO_VALOR.CADENA, $$[$0]);
               this.$.setLineaColumna( this._$.first_line , this._$.first_column);
             
break;
case 140:
 this.$ = new ValorBasico(TIPO_VALOR.BOOLEANO, true);
               this.$.setLineaColumna( this._$.first_line , this._$.first_column);
             
break;
case 141:
 this.$ = new ValorBasico(TIPO_VALOR.BOOLEANO, false);
               this.$.setLineaColumna( this._$.first_line , this._$.first_column);
             
break;
case 142:
 this.$ = new ValorBasico(TIPO_VALOR.NULO, null);
               this.$.setLineaColumna( this._$.first_line , this._$.first_column);
             
break;
}
},
table: [{10:14,20:$V0,26:$V1,69:13,95:2,106:1,109:3,112:$V2,113:4,118:5,121:7,122:$V3,123:$V4,124:$V5,125:$V6,126:$V7,127:16},{1:[3]},{68:$V8,107:18,108:$V9},o($Va,$Vb,{110:20,111:$Vc,112:$Vd}),o($Ve,$Vf,{114:23,115:$Vg,116:$Vh,117:$Vi}),o($Vj,$Vk,{119:27,70:$Vl,71:$Vm,120:$Vn}),{10:14,20:$V0,26:$V1,69:13,121:31,122:$V3,123:$V4,124:$V5,125:$V6,126:$V7,127:16},o($Vo,[2,137]),o($Vo,[2,138]),o($Vo,[2,139]),o($Vo,[2,140]),o($Vo,[2,141]),o($Vo,[2,142]),o($Vo,[2,143]),o($Vo,[2,144]),{10:14,20:$V0,24:32,26:$V1,69:13,92:33,95:37,96:$Vp,97:35,100:36,109:3,112:$V2,113:4,118:5,121:7,122:$V3,123:$V4,124:$V5,125:$V6,126:$V7,127:16},o($Vo,$Vq,{128:38,18:$Vr}),o($Vs,$Vt,{20:[1,40],72:$Vu}),{108:[1,42]},{10:14,20:$V0,26:$V1,69:13,95:43,109:3,112:$V2,113:4,118:5,121:7,122:$V3,123:$V4,124:$V5,125:$V6,126:$V7,127:16},o($Va,[2,122]),{10:14,20:$V0,26:$V1,69:13,109:44,112:$V2,113:4,118:5,121:7,122:$V3,123:$V4,124:$V5,125:$V6,126:$V7,127:16},{10:14,20:$V0,26:$V1,69:13,109:45,112:$V2,113:4,118:5,121:7,122:$V3,123:$V4,124:$V5,125:$V6,126:$V7,127:16},o($Ve,[2,126]),{10:14,20:$V0,26:$V1,69:13,112:$V2,113:46,118:5,121:7,122:$V3,123:$V4,124:$V5,125:$V6,126:$V7,127:16},{10:14,20:$V0,26:$V1,69:13,112:$V2,113:47,118:5,121:7,122:$V3,123:$V4,124:$V5,125:$V6,126:$V7,127:16},{10:14,20:$V0,26:$V1,69:13,112:$V2,113:48,118:5,121:7,122:$V3,123:$V4,124:$V5,125:$V6,126:$V7,127:16},o($Vj,[2,131]),{10:14,20:$V0,26:$V1,69:13,112:$V2,118:49,121:7,122:$V3,123:$V4,124:$V5,125:$V6,126:$V7,127:16},o($Vj,[2,133]),o($Vj,[2,134]),o($Vo,[2,136]),{22:[1,50],94:$Vv},o($Vw,$Vx,{93:52,98:$Vy,99:$Vz}),{10:14,20:$V0,26:$V1,69:13,95:37,97:55,100:36,109:3,112:$V2,113:4,118:5,121:7,122:$V3,123:$V4,124:$V5,125:$V6,126:$V7,127:16},o($VA,[2,106]),o($VA,[2,110]),o($VA,[2,118],{101:56,89:[1,62],90:[1,61],102:[1,57],103:[1,58],104:[1,59],105:[1,60]}),o($Vo,[2,146]),{26:[1,67],127:63,130:[1,64],131:[1,65],132:[1,66]},{10:14,20:$V0,21:69,22:[1,68],24:70,26:$V1,69:13,92:33,95:37,96:$Vp,97:35,100:36,109:3,112:$V2,113:4,118:5,121:7,122:$V3,123:$V4,124:$V5,125:$V6,126:$V7,127:16},{10:14,20:$V0,24:71,26:$V1,69:13,92:33,95:37,96:$Vp,97:35,100:36,109:3,112:$V2,113:4,118:5,121:7,122:$V3,123:$V4,124:$V5,125:$V6,126:$V7,127:16},{1:[2,119]},{68:$V8,107:72,108:$V9},o($Va,$Vb,{110:73,111:$Vc,112:$Vd}),o($Va,$Vb,{110:74,111:$Vc,112:$Vd}),o($Ve,$Vf,{114:75,115:$Vg,116:$Vh,117:$Vi}),o($Ve,$Vf,{114:76,115:$Vg,116:$Vh,117:$Vi}),o($Ve,$Vf,{114:77,115:$Vg,116:$Vh,117:$Vi}),o($Vj,$Vk,{119:78,70:$Vl,71:$Vm,120:$Vn}),o($Vo,[2,145]),{10:14,20:$V0,26:$V1,69:13,95:79,109:3,112:$V2,113:4,118:5,121:7,122:$V3,123:$V4,124:$V5,125:$V6,126:$V7,127:16},o($Vw,[2,103]),{10:14,20:$V0,26:$V1,69:13,92:80,95:37,96:$Vp,97:35,100:36,109:3,112:$V2,113:4,118:5,121:7,122:$V3,123:$V4,124:$V5,125:$V6,126:$V7,127:16},{10:14,20:$V0,26:$V1,69:13,92:81,95:37,96:$Vp,97:35,100:36,109:3,112:$V2,113:4,118:5,121:7,122:$V3,123:$V4,124:$V5,125:$V6,126:$V7,127:16},o($VA,[2,105]),o($VA,[2,111]),{10:14,20:$V0,26:$V1,69:13,95:82,109:3,112:$V2,113:4,118:5,121:7,122:$V3,123:$V4,124:$V5,125:$V6,126:$V7,127:16},{10:14,20:$V0,26:$V1,69:13,95:83,109:3,112:$V2,113:4,118:5,121:7,122:$V3,123:$V4,124:$V5,125:$V6,126:$V7,127:16},{10:14,20:$V0,26:$V1,69:13,95:84,109:3,112:$V2,113:4,118:5,121:7,122:$V3,123:$V4,124:$V5,125:$V6,126:$V7,127:16},{10:14,20:$V0,26:$V1,69:13,95:85,109:3,112:$V2,113:4,118:5,121:7,122:$V3,123:$V4,124:$V5,125:$V6,126:$V7,127:16},{10:14,20:$V0,26:$V1,69:13,95:86,109:3,112:$V2,113:4,118:5,121:7,122:$V3,123:$V4,124:$V5,125:$V6,126:$V7,127:16},{10:14,20:$V0,26:$V1,69:13,95:87,109:3,112:$V2,113:4,118:5,121:7,122:$V3,123:$V4,124:$V5,125:$V6,126:$V7,127:16},o($Vo,$Vq,{128:88,18:$Vr}),o($Vo,[2,152]),{20:[1,89]},{20:[1,90]},o($Vs,$Vt,{72:$Vu}),o($Vo,[2,85]),{22:[1,91]},{22:$VB,68:$VC,80:92,94:$Vv},{74:[1,94],94:$Vv},{108:[2,120]},o($Va,[2,123]),o($Va,[2,124]),o($Ve,[2,127]),o($Ve,[2,128]),o($Ve,[2,129]),o($Vj,[2,132]),{28:[1,95]},o($Vw,$Vx,{93:96,98:$Vy,99:$Vz}),o($Vw,$Vx,{93:97,98:$Vy,99:$Vz}),o($VA,[2,112]),o($VA,[2,113]),o($VA,[2,114]),o($VA,[2,115]),o($VA,[2,116]),o($VA,[2,117]),o($Vo,[2,151]),{10:14,20:$V0,24:98,26:$V1,69:13,92:33,95:37,96:$Vp,97:35,100:36,109:3,112:$V2,113:4,118:5,121:7,122:$V3,123:$V4,124:$V5,125:$V6,126:$V7,127:16},{22:[1,99]},o($Vo,[2,86]),{22:[2,87]},{10:14,20:$V0,24:100,26:$V1,69:13,92:33,95:37,96:$Vp,97:35,100:36,109:3,112:$V2,113:4,118:5,121:7,122:$V3,123:$V4,124:$V5,125:$V6,126:$V7,127:16},o($Vs,$VD,{129:101,72:$VE}),{10:14,20:$V0,26:$V1,69:13,95:103,109:3,112:$V2,113:4,118:5,121:7,122:$V3,123:$V4,124:$V5,125:$V6,126:$V7,127:16},o($Vw,[2,107]),o($Vw,[2,108]),{22:[1,104],94:$Vv},o($Vo,[2,154]),{22:$VB,68:$VC,80:105,94:$Vv},o($Vs,[2,148]),{10:14,20:$V0,24:106,26:$V1,69:13,92:33,95:37,96:$Vp,97:35,100:36,109:3,112:$V2,113:4,118:5,121:7,122:$V3,123:$V4,124:$V5,125:$V6,126:$V7,127:16},o($Vw,[2,104]),o($Vo,[2,153]),{22:[2,88]},{74:[1,107],94:$Vv},o($Vs,$VD,{129:108,72:$VE}),o($Vs,[2,149])],
defaultActions: {42:[2,119],72:[2,120],92:[2,87],105:[2,88]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};


function errorSintactico(a, linea){
  console.log( "Error Sintactico => " + a +" linea: "+linea );
}

function errorLexico(a, linea){
  console.log( "Error Lexico => " + a +" linea: "+linea);
}

function write(a){
	console.log("token: "+ a);
}

function eliminarComillasa(texto){
    console.log(texto);
    var t = "";
    for(var i = 0; i < texto.length; i++){
        if(texto[i] !== '"'){
            t += texto[i];
        }
    }
    return t;
}

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// comentario simple línea
break;
case 1:// comentario multiple líneas
break;
case 2:return  'let';
break;
case 3:return  'const';
break;
case 4:return  'push';
break;
case 5:return  'pop';
break;
case 6:return  'length';
break;
case 7:return  'true';
break;
case 8:return  'false';
break;
case 9:return  'null';
break;
case 10:return  'void';
break;
case 11:return  'if';
break;
case 12:return  'else';
break;
case 13:return  'while';
break;
case 14:return  'switch_term';
break;
case 15:return  'case_term';
break;
case 16:return  'default_term';
break;
case 17:return  'do';
break;
case 18:return  'let';
break;
case 19:return  'const';
break;
case 20:return  'of';
break;
case 21:return  'in';
break;
case 22:return  'for';
break;
case 23:return  'number';
break;
case 24:return  'string';
break;
case 25:return  'boolean';
break;
case 26:return  'Array';
break;
case 27:return  'function';
break;
case 28:return  'return';
break;
case 29:return  'break';
break;
case 30:return  'continue';
break;
case 31:return  'type';
break;
case 32:return  'graficar_ts';
break;
case 33:return  'console';
break;
case 34:return  'log';
break;
case 35:return 30;
break;
case 36:return 31;
break;
case 37:return 20;
break;
case 38:return 22;
break;
case 39:return 72;
break;
case 40:return 74;
break;
case 41:return 18;
break;
case 42:return 28;
break;
case 43:return 11;
break;
case 44:return 68;
break;
case 45:return 94;
break;
case 46:return 98;
break;
case 47:return '|?';
break;
case 48:return 99;
break;
case 49:return '&?';
break;
case 50:return '|&';
break;
case 51:return 102;
break;
case 52:return 103;
break;
case 53:return 104;
break;
case 54:return 105;
break;
case 55:return 96;
break;
case 56:return 90;
break;
case 57:return 89;
break;
case 58:return 120;
break;
case 59:return 70;
break;
case 60:return 71;
break;
case 61:return 111;
break;
case 62:return 112;
break;
case 63:return 115;
break;
case 64:return 116;
break;
case 65:return 117;
break;
case 66:return 63;
break;
case 67:return 108;
break;
case 68:return 122;
break;
case 69:return 26;
break;
case 70:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 123;
break;
case 71:/* skip whitespace */
break;
case 72:errorLexico(yy_.yytext, yy_.yylineno); //return 'INVALID'
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/,/^(?:let\b)/,/^(?:const\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:null\b)/,/^(?:void\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:do\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:of\b)/,/^(?:in\b)/,/^(?:for\b)/,/^(?:number\b)/,/^(?:string\b)/,/^(?:boolean\b)/,/^(?:Array\b)/,/^(?:function\b)/,/^(?:return\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:type\b)/,/^(?:graficar_ts\b)/,/^(?:console\b)/,/^(?:log\b)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\.)/,/^(?::)/,/^(?:;)/,/^(?:,)/,/^(?:\?)/,/^(?:\|\|)/,/^(?:\|\?)/,/^(?:&&)/,/^(?:&\?)/,/^(?:\|&)/,/^(?:>=)/,/^(?:<=)/,/^(?:==)/,/^(?:!=)/,/^(?:!)/,/^(?:>)/,/^(?:<)/,/^(?:\*\*)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:=)/,/^(?:$)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[a-zA-ZñÑ_]([a-zA-ZñÑ_0-9])*)/,/^(?:"[^\"]*"|'[^\']*'|`[^\`]*`)/,/^(?:\s+)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}